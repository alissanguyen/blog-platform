datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  username String    @unique
  status   Boolean   @default(true)
  profile  Profile?
  password Password?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Profile {
  id             String     @id @default(cuid())
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String     @unique
  displayName    String
  avatarUrl      String
  bio            String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  posts          Post[]
  topicsFollowed Topic[]
  bookmarks      Bookmark[]
  comments       Comment[]
  likes          Like[]
}

model Topic {
  id          String    @id
  label       String
  description String    @default("")
  posts       Post[]
  profiles    Profile[]
}

model Bookmark {
  id          String   @id
  post        Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId      String
  profile     Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId   String?
  createdAt   DateTime @default(now())
}

model Post {
  id          String     @id @default(cuid())
  splashImage String
  title       String
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profile     Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId   String
  topics      Topic[]
  bookmarks   Bookmark[]
  viewCount   Int        @default(0)
  comments    Comment[]
  likes       Like[]
}

model Like {
  id          String   @id
  post        Post?    @relation(fields: [postId], references: [id])
  postId      String?
  comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   String?
  profile     Profile? @relation(fields: [profileId], references: [id])
  profileId   String?
  createdAt   DateTime @default(now())
}

model Comment {
  id          String   @id
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId      String
  referenceId String
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId   String
  content     String
  depth       Int      @default(0)
  likes       Like[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Follower {
  id              String   @id
  follower        Profile  @relation(fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId      String
  followedUser    Profile  @relation(fields: [followedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedUserId  String
  createdAt       DateTime @default(now())
}

model Following {
  id              String   @id
  follower        Profile  @relation(fields: [followerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followerId      String
  followedUser    Profile  @relation(fields: [followedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  followedUserId  String
  createdAt       DateTime @default(now())
}
