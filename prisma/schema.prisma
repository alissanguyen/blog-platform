datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String    @id @default(cuid())
  email    String    @unique
  username String    @unique
  status   Boolean   @default(true)
  profile  Profile?
  Password Password?
}

model Password {
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Profile {
  id             String     @id @default(cuid())
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String     @unique
  displayName    String
  avatarUrl      String
  bio            String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  posts          Post[]
  topicsFollowed Topic[]
  bookmarks      Bookmark[]
  comments       Comment[]
  likes          Like[]
}

model Topic {
  id          String    @id
  label       String
  description String    @default("")
  posts       Post[]
  profiles    Profile[]
}

model Bookmark {
  id        String   @id
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String
  Profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId String?
  createdAt DateTime @default(now())
}

model Post {
  id          String     @id @default(cuid())
  splashImage String
  title       String
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profile     Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId   String
  topics      Topic[]
  Bookmark    Bookmark[]
  viewCount   String     @default("0")
  Comment     Comment[]
  likes       Like[]
}

model Like {
  id        String   @id @default(cuid())
  Post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
  Comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?
  Profile   Profile? @relation(fields: [profileId], references: [id])
  profileId String?
}

model Comment {
  id        String   @id @default(cuid())
  Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId String
  content   String
  likes     Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
